deSolve,
tidyverse,
openxlsx,
MetBrewer,
ggsci,
scales,
cowplot,
patchwork,
slider,
lubridate
)
rm(list = ls())
# initial values
V0 <- read.xlsx('pop_of_S_28.xlsx', sheet = 1)
V0 <- V0$n_fujian # inital value for number of susceptible stratified by vaccination status
V0 <- matrix(V0, nrow = 7, byrow = T)
E0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of exposed
P0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
A0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
I0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of infectious
I0[4, 1] <- 1
R0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of recovered
C0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
# parameters
beta <- read.xlsx('Beta_28.xlsx', sheet = 2, colNames = F)
beta <- as.matrix(beta) # matrix of transmission rates
kappa1 <- matrix(rep(0.63, 28), nrow = 7, byrow = T)
kappa2 <- matrix(rep(0.35, 28), nrow = 7, byrow = T)
HR <- matrix(rep(c(1, 0.54036, 0.44003, 0.36506), 7), nrow = 7, byrow = T)
mu <- matrix(rep(0.33, 28), nrow = 7, byrow = T)
omega <- matrix(rep(1/3, 28), nrow = 7, byrow = T)
omegap <- matrix(rep(1/3, 28), nrow = 7, byrow = T) # rate at which individuals move from the exposed to the pre-symptom classes
omegapp <- matrix(rep(1/2, 28), nrow = 7, byrow = T)
gamma <- matrix(rep(1/5, 28), nrow = 7, byrow = T) # recovery rate
gammap <- matrix(rep(1/7, 28), nrow = 7, byrow = T)
f_raw <- read.xlsx('death_rate.xlsx', sheet = 1, colNames = F)
f <- as.matrix(f_raw)
# combining parameter and initial values
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
INPUT <- c(t(V0), t(E0), t(P0), t(A0), t(I0), t(R0), t(C0)) # same order as ode return list
t_range <- seq(from = 0, to = 270, by = 1) # vector with time steps
# differential equations --------------------------------------------------
diff_eqs <- function(times, INPUT, parms){
with(as.list(c(INPUT, parms)), {
V <- matrix(INPUT[1:28], nrow = 7, byrow = T)
E <- matrix(INPUT[29:56], nrow = 7, byrow = T)
P <- matrix(INPUT[57:84], nrow = 7, byrow = T)
A <- matrix(INPUT[85:112], nrow = 7, byrow = T)
I <- matrix(INPUT[113:140], nrow = 7, byrow = T)
R <- matrix(INPUT[141:168], nrow = 7, byrow = T)
C <- matrix(INPUT[169:196], nrow = 7, byrow = T)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -c(lambda) * HR * V
dE <- c(lambda) * HR * V - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
dC <- omegapp*P
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR), t(dC))) # same order as the INPUT
})
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
28*2
y <- as.vector(out$`57`)
head(t)
t <- t_range
head(t)
myfunction <- function(t, y) {
1/2 * (y[-length(y)]+y[-1]) %*% (t[-1] - t[-length(t)])
}
myfunction(t, y)
8416771*omegapp
max(out$`57`)
(1/2 * (y[-length(y)]+y[-1])) %*% (t[-1] - t[-length(t)])
y <- as.vector(out$`57`)
t <- t_range
myfunction(t, y)
omegapp
max(out$`57`)
28*3
28*6
max(out$`169`)
4208386 * 0.000322581
gamma
cfr <- 0.000322581
temp <- 0.2*cfr / (1+cfr)
myfunction(t, y)
28*4
i <- as.vector(out$`113`)
myfunction(t, i)
21007026*temp
omegapp
t_range
rm(list = ls())
# initial values
V0 <- read.xlsx('pop_of_S_28.xlsx', sheet = 1)
V0 <- V0$n_fujian # inital value for number of susceptible stratified by vaccination status
V0 <- matrix(V0, nrow = 7, byrow = T)
E0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of exposed
P0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
A0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
I0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of infectious
I0[4, 1] <- 1
R0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of recovered
C0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
# parameters
beta <- read.xlsx('Beta_28.xlsx', sheet = 2, colNames = F)
beta <- as.matrix(beta) # matrix of transmission rates
kappa1 <- matrix(rep(0.63, 28), nrow = 7, byrow = T)
kappa2 <- matrix(rep(0.35, 28), nrow = 7, byrow = T)
HR <- matrix(rep(c(1, 0.54036, 0.44003, 0.36506), 7), nrow = 7, byrow = T)
mu <- matrix(rep(0.33, 28), nrow = 7, byrow = T)
omega <- matrix(rep(1/3, 28), nrow = 7, byrow = T)
omegap <- matrix(rep(1/3, 28), nrow = 7, byrow = T) # rate at which individuals move from the exposed to the pre-symptom classes
omegapp <- matrix(rep(1/2, 28), nrow = 7, byrow = T)
gamma <- matrix(rep(1/5, 28), nrow = 7, byrow = T) # recovery rate
gammap <- matrix(rep(1/7, 28), nrow = 7, byrow = T)
f_raw <- read.xlsx('death_rate.xlsx', sheet = 1, colNames = F)
f <- as.matrix(f_raw)
# combining parameter and initial values
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
INPUT <- c(t(V0), t(E0), t(P0), t(A0), t(I0), t(R0), t(C0)) # same order as ode return list
t_range <- seq(from = 0, to = 10000, by = 0.1) # vector with time steps
# differential equations --------------------------------------------------
diff_eqs <- function(times, INPUT, parms){
with(as.list(c(INPUT, parms)), {
V <- matrix(INPUT[1:28], nrow = 7, byrow = T)
E <- matrix(INPUT[29:56], nrow = 7, byrow = T)
P <- matrix(INPUT[57:84], nrow = 7, byrow = T)
A <- matrix(INPUT[85:112], nrow = 7, byrow = T)
I <- matrix(INPUT[113:140], nrow = 7, byrow = T)
R <- matrix(INPUT[141:168], nrow = 7, byrow = T)
C <- matrix(INPUT[169:196], nrow = 7, byrow = T)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -c(lambda) * HR * V
dE <- c(lambda) * HR * V - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
dC <- omegapp*P
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR), t(dC))) # same order as the INPUT
})
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
rm(list = ls())
# initial values
V0 <- read.xlsx('pop_of_S_28.xlsx', sheet = 1)
V0 <- V0$n_fujian # inital value for number of susceptible stratified by vaccination status
V0 <- matrix(V0, nrow = 7, byrow = T)
E0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of exposed
P0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
A0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
I0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of infectious
I0[4, 1] <- 1
R0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of recovered
C0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
# parameters
beta <- read.xlsx('Beta_28.xlsx', sheet = 2, colNames = F)
beta <- as.matrix(beta) # matrix of transmission rates
kappa1 <- matrix(rep(0.63, 28), nrow = 7, byrow = T)
kappa2 <- matrix(rep(0.35, 28), nrow = 7, byrow = T)
HR <- matrix(rep(c(1, 0.54036, 0.44003, 0.36506), 7), nrow = 7, byrow = T)
mu <- matrix(rep(0.33, 28), nrow = 7, byrow = T)
omega <- matrix(rep(1/3, 28), nrow = 7, byrow = T)
omegap <- matrix(rep(1/3, 28), nrow = 7, byrow = T) # rate at which individuals move from the exposed to the pre-symptom classes
omegapp <- matrix(rep(1/2, 28), nrow = 7, byrow = T)
gamma <- matrix(rep(1/5, 28), nrow = 7, byrow = T) # recovery rate
gammap <- matrix(rep(1/7, 28), nrow = 7, byrow = T)
f_raw <- read.xlsx('death_rate.xlsx', sheet = 1, colNames = F)
f <- as.matrix(f_raw)
# combining parameter and initial values
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
INPUT <- c(t(V0), t(E0), t(P0), t(A0), t(I0), t(R0), t(C0)) # same order as ode return list
t_range <- seq(from = 0, to = 1000, by = 1) # vector with time steps
# differential equations --------------------------------------------------
diff_eqs <- function(times, INPUT, parms){
with(as.list(c(INPUT, parms)), {
V <- matrix(INPUT[1:28], nrow = 7, byrow = T)
E <- matrix(INPUT[29:56], nrow = 7, byrow = T)
P <- matrix(INPUT[57:84], nrow = 7, byrow = T)
A <- matrix(INPUT[85:112], nrow = 7, byrow = T)
I <- matrix(INPUT[113:140], nrow = 7, byrow = T)
R <- matrix(INPUT[141:168], nrow = 7, byrow = T)
C <- matrix(INPUT[169:196], nrow = 7, byrow = T)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -c(lambda) * HR * V
dE <- c(lambda) * HR * V - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
dC <- omegapp*P
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR), t(dC))) # same order as the INPUT
})
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
y <- as.vector(out$`57`)
t <- t_range
i <- as.vector(out$`113`)
cfr * omegapp * myfunction(t, y)
cfr <- 0.000322581
temp <- 0.2*cfr / (1+cfr)
cfr * omegapp * myfunction(t, y)
1/2 * (y[-length(y)]+y[-1]) %*% (t[-1] - t[-length(t)])
myfunction <- function(t, y) {
1/2 * (y[-length(y)]+y[-1]) %*% (t[-1] - t[-length(t)])
}
cfr * omegapp * myfunction(t, y)
cfr * omegapp * myfunction(t, y)[1,1]
cfr * omegapp[1,1] * myfunction(t, y)[1,1]
temp * myfunction(t, i)[1,1]
rm(list = ls())
# initial values
V0 <- read.xlsx('pop_of_S_28.xlsx', sheet = 1)
V0 <- V0$n_fujian # inital value for number of susceptible stratified by vaccination status
V0 <- matrix(V0, nrow = 7, byrow = T)
E0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of exposed
P0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
A0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
I0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of infectious
I0[4, 1] <- 1
R0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of recovered
C0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
# parameters
beta <- read.xlsx('Beta_28.xlsx', sheet = 2, colNames = F)
beta <- as.matrix(beta) # matrix of transmission rates
kappa1 <- matrix(rep(0.63, 28), nrow = 7, byrow = T)
kappa2 <- matrix(rep(0.35, 28), nrow = 7, byrow = T)
HR <- matrix(rep(c(1, 0.54036, 0.44003, 0.36506), 7), nrow = 7, byrow = T)
mu <- matrix(rep(0.33, 28), nrow = 7, byrow = T)
omega <- matrix(rep(1/3, 28), nrow = 7, byrow = T)
omegap <- matrix(rep(1/3, 28), nrow = 7, byrow = T) # rate at which individuals move from the exposed to the pre-symptom classes
omegapp <- matrix(rep(1/2, 28), nrow = 7, byrow = T)
gamma <- matrix(rep(1/5, 28), nrow = 7, byrow = T) # recovery rate
gammap <- matrix(rep(1/7, 28), nrow = 7, byrow = T)
f_raw <- read.xlsx('death_rate.xlsx', sheet = 1, colNames = F)
f <- as.matrix(f_raw)
# combining parameter and initial values
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
INPUT <- c(t(V0), t(E0), t(P0), t(A0), t(I0), t(R0), t(C0)) # same order as ode return list
t_range <- seq(from = 0, to = 1000, by = 0.1)
# differential equations --------------------------------------------------
diff_eqs <- function(times, INPUT, parms){
with(as.list(c(INPUT, parms)), {
V <- matrix(INPUT[1:28], nrow = 7, byrow = T)
E <- matrix(INPUT[29:56], nrow = 7, byrow = T)
P <- matrix(INPUT[57:84], nrow = 7, byrow = T)
A <- matrix(INPUT[85:112], nrow = 7, byrow = T)
I <- matrix(INPUT[113:140], nrow = 7, byrow = T)
R <- matrix(INPUT[141:168], nrow = 7, byrow = T)
C <- matrix(INPUT[169:196], nrow = 7, byrow = T)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -c(lambda) * HR * V
dE <- c(lambda) * HR * V - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
dC <- omegapp*P
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR), t(dC))) # same order as the INPUT
})
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
myfunction <- function(t, y) {
1/2 * (y[-length(y)]+y[-1]) %*% (t[-1] - t[-length(t)])
}
y <- as.vector(out$`57`)
t <- t_range
i <- as.vector(out$`113`)
cfr <- 0.000322581
temp <- 0.2*cfr / (1+cfr)
cfr * omegapp[1,1] * myfunction(t, y)[1,1]
temp * myfunction(t, i)[1,1]
rm(list = ls())
# initial values
V0 <- read.xlsx('pop_of_S_28.xlsx', sheet = 1)
V0 <- V0$n_fujian # inital value for number of susceptible stratified by vaccination status
V0 <- matrix(V0, nrow = 7, byrow = T)
E0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of exposed
P0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
A0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
I0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of infectious
I0[4, 1] <- 1
R0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of recovered
C0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
# parameters
beta <- read.xlsx('Beta_28.xlsx', sheet = 2, colNames = F)
beta <- as.matrix(beta) # matrix of transmission rates
kappa1 <- matrix(rep(0.63, 28), nrow = 7, byrow = T)
kappa2 <- matrix(rep(0.35, 28), nrow = 7, byrow = T)
HR <- matrix(rep(c(1, 0.54036, 0.44003, 0.36506), 7), nrow = 7, byrow = T)
mu <- matrix(rep(0.33, 28), nrow = 7, byrow = T)
omega <- matrix(rep(1/3, 28), nrow = 7, byrow = T)
omegap <- matrix(rep(1/3, 28), nrow = 7, byrow = T) # rate at which individuals move from the exposed to the pre-symptom classes
omegapp <- matrix(rep(1/2, 28), nrow = 7, byrow = T)
gamma <- matrix(rep(1/5, 28), nrow = 7, byrow = T) # recovery rate
gammap <- matrix(rep(1/7, 28), nrow = 7, byrow = T)
f_raw <- read.xlsx('death_rate.xlsx', sheet = 1, colNames = F)
f <- as.matrix(f_raw)
# combining parameter and initial values
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
INPUT <- c(t(V0), t(E0), t(P0), t(A0), t(I0), t(R0), t(C0)) # same order as ode return list
t_range <- seq(from = 0, to = 10000, by = 1)
diff_eqs <- function(times, INPUT, parms){
with(as.list(c(INPUT, parms)), {
V <- matrix(INPUT[1:28], nrow = 7, byrow = T)
E <- matrix(INPUT[29:56], nrow = 7, byrow = T)
P <- matrix(INPUT[57:84], nrow = 7, byrow = T)
A <- matrix(INPUT[85:112], nrow = 7, byrow = T)
I <- matrix(INPUT[113:140], nrow = 7, byrow = T)
R <- matrix(INPUT[141:168], nrow = 7, byrow = T)
C <- matrix(INPUT[169:196], nrow = 7, byrow = T)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -c(lambda) * HR * V
dE <- c(lambda) * HR * V - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
dC <- omegapp*P
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR), t(dC))) # same order as the INPUT
})
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
myfunction <- function(t, y) {
1/2 * (y[-length(y)]+y[-1]) %*% (t[-1] - t[-length(t)])
}
y <- as.vector(out$`57`)
t <- t_range
i <- as.vector(out$`113`)
cfr <- 0.000322581
temp <- 0.2*cfr / (1+cfr)
cfr * omegapp[1,1] * myfunction(t, y)[1,1]
temp * myfunction(t, i)[1,1]
f_raw <- read.xlsx('death_rate.xlsx', sheet = 1, colNames = F)
gamma*f_raw / (1+f_raw)
f_raw <- gamma*f_raw / (1+f_raw)
rm(list = ls())
# initial values
V0 <- read.xlsx('pop_of_S_28.xlsx', sheet = 1)
V0 <- V0$n_fujian # inital value for number of susceptible stratified by vaccination status
V0 <- matrix(V0, nrow = 7, byrow = T)
E0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of exposed
P0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
A0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
I0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of infectious
I0[4, 1] <- 1
R0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of recovered
C0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
# parameters
beta <- read.xlsx('Beta_28.xlsx', sheet = 2, colNames = F)
beta <- as.matrix(beta) # matrix of transmission rates
kappa1 <- matrix(rep(0.63, 28), nrow = 7, byrow = T)
kappa2 <- matrix(rep(0.35, 28), nrow = 7, byrow = T)
HR <- matrix(rep(c(1, 0.54036, 0.44003, 0.36506), 7), nrow = 7, byrow = T)
mu <- matrix(rep(0.33, 28), nrow = 7, byrow = T)
omega <- matrix(rep(1/3, 28), nrow = 7, byrow = T)
omegap <- matrix(rep(1/3, 28), nrow = 7, byrow = T) # rate at which individuals move from the exposed to the pre-symptom classes
omegapp <- matrix(rep(1/2, 28), nrow = 7, byrow = T)
gamma <- matrix(rep(1/5, 28), nrow = 7, byrow = T) # recovery rate
gammap <- matrix(rep(1/7, 28), nrow = 7, byrow = T)
f_raw <- read.xlsx('death_rate.xlsx', sheet = 1, colNames = F)
f_raw <- gamma*f_raw / (1+f_raw)
f <- as.matrix(f_raw)
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
INPUT <- c(t(V0), t(E0), t(P0), t(A0), t(I0), t(R0), t(C0)) # same order as ode return list
t_range <- seq(from = 0, to = 1000, by = 1) # vector with time steps
# differential equations --------------------------------------------------
diff_eqs <- function(times, INPUT, parms){
with(as.list(c(INPUT, parms)), {
V <- matrix(INPUT[1:28], nrow = 7, byrow = T)
E <- matrix(INPUT[29:56], nrow = 7, byrow = T)
P <- matrix(INPUT[57:84], nrow = 7, byrow = T)
A <- matrix(INPUT[85:112], nrow = 7, byrow = T)
I <- matrix(INPUT[113:140], nrow = 7, byrow = T)
R <- matrix(INPUT[141:168], nrow = 7, byrow = T)
C <- matrix(INPUT[169:196], nrow = 7, byrow = T)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -c(lambda) * HR * V
dE <- c(lambda) * HR * V - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
dC <- omegapp*P
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR), t(dC))) # same order as the INPUT
})
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
myfunction <- function(t, y) {
1/2 * (y[-length(y)]+y[-1]) %*% (t[-1] - t[-length(t)])
}
y <- as.vector(out$`57`)
t <- t_range
i <- as.vector(out$`113`)
cfr <- 0.000322581
temp <- 0.2*cfr / (1+cfr)
cfr * omegapp[1,1] * myfunction(t, y)[1,1]
temp * myfunction(t, i)[1,1]
rm(list = ls())
# initial values
V0 <- read.xlsx('pop_of_S_28.xlsx', sheet = 1)
V0 <- V0$n_fujian # inital value for number of susceptible stratified by vaccination status
V0 <- matrix(V0, nrow = 7, byrow = T)
E0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of exposed
P0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
A0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
I0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of infectious
I0[4, 1] <- 1
R0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of recovered
C0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
# parameters
beta <- read.xlsx('Beta_28.xlsx', sheet = 2, colNames = F)
beta <- as.matrix(beta) # matrix of transmission rates
kappa1 <- matrix(rep(0.63, 28), nrow = 7, byrow = T)
kappa2 <- matrix(rep(0.35, 28), nrow = 7, byrow = T)
HR <- matrix(rep(c(1, 0.54036, 0.44003, 0.36506), 7), nrow = 7, byrow = T)
mu <- matrix(rep(0.33, 28), nrow = 7, byrow = T)
omega <- matrix(rep(1/3, 28), nrow = 7, byrow = T)
omegap <- matrix(rep(1/3, 28), nrow = 7, byrow = T) # rate at which individuals move from the exposed to the pre-symptom classes
omegapp <- matrix(rep(1/2, 28), nrow = 7, byrow = T)
gamma <- matrix(rep(1/5, 28), nrow = 7, byrow = T) # recovery rate
gammap <- matrix(rep(1/7, 28), nrow = 7, byrow = T)
f_raw <- read.xlsx('death_rate.xlsx', sheet = 1, colNames = F)
f_raw <- gamma*f_raw / (1+f_raw)
f <- as.matrix(f_raw)
# combining parameter and initial values
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
INPUT <- c(t(V0), t(E0), t(P0), t(A0), t(I0), t(R0), t(C0)) # same order as ode return list
t_range <- seq(from = 0, to = 10000, by = 1) # vector with time steps
# differential equations --------------------------------------------------
diff_eqs <- function(times, INPUT, parms){
with(as.list(c(INPUT, parms)), {
V <- matrix(INPUT[1:28], nrow = 7, byrow = T)
E <- matrix(INPUT[29:56], nrow = 7, byrow = T)
P <- matrix(INPUT[57:84], nrow = 7, byrow = T)
A <- matrix(INPUT[85:112], nrow = 7, byrow = T)
I <- matrix(INPUT[113:140], nrow = 7, byrow = T)
R <- matrix(INPUT[141:168], nrow = 7, byrow = T)
C <- matrix(INPUT[169:196], nrow = 7, byrow = T)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -c(lambda) * HR * V
dE <- c(lambda) * HR * V - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
dC <- omegapp*P
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR), t(dC))) # same order as the INPUT
})
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
myfunction <- function(t, y) {
1/2 * (y[-length(y)]+y[-1]) %*% (t[-1] - t[-length(t)])
}
y <- as.vector(out$`57`)
t <- t_range
i <- as.vector(out$`113`)
cfr <- 0.000322581
temp <- 0.2*cfr / (1+cfr)
cfr * omegapp[1,1] * myfunction(t, y)[1,1]
temp * myfunction(t, i)[1,1]
t_range <- seq(from = 0, to = 1000, by = 0.1) # vector with time steps
# differential equations --------------------------------------------------
diff_eqs <- function(times, INPUT, parms){
with(as.list(c(INPUT, parms)), {
V <- matrix(INPUT[1:28], nrow = 7, byrow = T)
E <- matrix(INPUT[29:56], nrow = 7, byrow = T)
P <- matrix(INPUT[57:84], nrow = 7, byrow = T)
A <- matrix(INPUT[85:112], nrow = 7, byrow = T)
I <- matrix(INPUT[113:140], nrow = 7, byrow = T)
R <- matrix(INPUT[141:168], nrow = 7, byrow = T)
C <- matrix(INPUT[169:196], nrow = 7, byrow = T)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -c(lambda) * HR * V
dE <- c(lambda) * HR * V - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
dC <- omegapp*P
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR), t(dC))) # same order as the INPUT
})
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
myfunction <- function(t, y) {
1/2 * (y[-length(y)]+y[-1]) %*% (t[-1] - t[-length(t)])
}
y <- as.vector(out$`57`)
t <- t_range
i <- as.vector(out$`113`)
cfr <- 0.000322581
temp <- 0.2*cfr / (1+cfr)
cfr * omegapp[1,1] * myfunction(t, y)[1,1]
temp * myfunction(t, i)[1,1]
