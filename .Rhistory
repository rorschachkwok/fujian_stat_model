)+
scale_x_discrete(labels = c('School \nclosure', 'Factory \nclosure',
'School + factory\nclosure'))+
theme_classic()+
theme(axis.text = element_text(colour = 'black', size = 10),
axis.text.x =element_text(angle = 60, vjust = 0.5),
strip.background = element_blank())+
labs(x = 'Scenarios',
y = "Reduction of peak daily incidence") +
facet_wrap(~ age_group, nrow = 1,
labeller = labeller(age_group = reduction_facet_label))
patch_reduction <- d_peak_reduction /
o_peak_reduction
patch_reduction + plot_annotation(tag_levels = 'a')
ggsave('plot_peak_reduction.pdf', height = 6, width = 13, dpi = 300)
d_peak_reduction <- reduce_incid %>% filter(scenario != 'w') %>%
ggplot(mapping = aes(x = scenario, y = reduce_incid)) +
geom_col(fill = 'cornsilk3') +
geom_text(aes(label = scales::percent(1 - prop_to_w, accuracy = 0.01)),
vjust = -0.2,
colour = "black")+
scale_y_continuous(
expand = expansion(0),
limits = c(0, 1.1),
breaks = seq(0, 1, 0.25),
labels = scales::percent
)+
scale_x_discrete(labels = c('School \nclosure', 'Factory \nclosure',
'School + factory\nclosure'))+
theme_classic()+
theme(axis.text = element_text(colour = 'black', size = 10),
axis.text.x =element_text(angle = 60, vjust = 0.5),
strip.background = element_blank())+
labs(x = 'Scenarios',
y = "Reduction of\npeak daily incidence") +
facet_wrap(~ age_group, nrow = 1,
labeller = labeller(age_group = reduction_facet_label))
# initial values
V0 <- read.xlsx('pop_of_S_28.xlsx', sheet = 1)
V0 <- V0$n_fujian # inital value for number of susceptible stratified by vaccination status
V0 <- matrix(V0, nrow = 7, byrow = T)
E0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of exposed
P0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
A0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
I0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of infectious
I0[4, 1] <- 1
R0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of recovered
C0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
# parameters
beta <- read.xlsx('Beta_28.xlsx', sheet = 4, colNames = F)
beta <- as.matrix(beta) # matrix of transmission rates
kappa1 <- matrix(rep(0.63, 28), nrow = 7, byrow = T)
kappa2 <- matrix(rep(0.35, 28), nrow = 7, byrow = T)
HR <- matrix(rep(c(1, 0.99, 0.97, 0.97), 7), nrow = 7, byrow = T)
mu <- matrix(rep(0.55, 28), nrow = 7, byrow = T)
omega <- matrix(rep(1/3, 28), nrow = 7, byrow = T)
omegap <- matrix(rep(1/2, 28), nrow = 7, byrow = T) # rate at which individuals move from the exposed to the pre-symptom classes
omegapp <- matrix(rep(1, 28), nrow = 7, byrow = T)
gamma <- matrix(rep(1/3, 28), nrow = 7, byrow = T) # recovery rate
gammap <- matrix(rep(1/3, 28), nrow = 7, byrow = T)
f_raw <- read.xlsx('death_rate.xlsx', sheet = 2, colNames = F)
f <- as.matrix(f_raw)
# combining parameter and initial values
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
INPUT <- c(t(V0), t(E0), t(P0), t(A0), t(I0), t(R0), t(C0)) # same order as ode return list
t_range <- seq(from = 0, to = 365, by = 1) # vector with time steps
# differential equations --------------------------------------------------
diff_eqs <- function(times, INPUT, parms){
with(as.list(c(INPUT, parms)), {
V <- matrix(INPUT[1:28], nrow = 7, byrow = T)
E <- matrix(INPUT[29:56], nrow = 7, byrow = T)
P <- matrix(INPUT[57:84], nrow = 7, byrow = T)
A <- matrix(INPUT[85:112], nrow = 7, byrow = T)
I <- matrix(INPUT[113:140], nrow = 7, byrow = T)
R <- matrix(INPUT[141:168], nrow = 7, byrow = T)
C <- matrix(INPUT[169:196], nrow = 7, byrow = T)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -c(lambda) * HR * V
dE <- c(lambda) * HR * V - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
dC <- omegapp*P
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR), t(dC))) # same order as the INPUT
})
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
# change param to cut factory
beta <- read.xlsx('Beta_28_cut_f.xlsx', sheet = 4, colNames = F)
beta <- as.matrix(beta)
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
# simulate cut factory
cut_f <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
cut_f <- as.data.frame(cut_f)
# change param to cut school
beta <- read.xlsx('Beta_28_cut_s.xlsx', sheet = 4, colNames = F)
beta <- as.matrix(beta)
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
# simulate cut school
cut_s <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
cut_s <- as.data.frame(cut_s)
# change param to only community and others
beta <- read.xlsx('Beta_28_cno.xlsx', sheet = 4, colNames = F)
beta <- as.matrix(beta)
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
# simulate only community and others
cno <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
cno <- as.data.frame(cno)
# df management -----------------------------------------------------------
m <- 28
age_id <- rep(1:7, each = 4)
vac_id <- rep(1:4, 7)
pop <- read.xlsx('pop_of_S_28.xlsx', sheet = 1, colNames = T)
pop <- pop[, c("group", 'age_group', 'vac_group', "n_fujian")]
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(status = as.numeric(group)) %>%
mutate(status = case_when(status %in% seq(    1,   m) ~ 'Susceptible',
status %in% seq(  m+1, 2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered',
status %in% seq(6*m+1, 7*m) ~ 'Cumulative')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered', 'Cumulative'))
for (i in 1:28) {
df[df$group %in% c(seq(i, 6*m+i, m)), 'group'] <- c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))
}
sele_w <- df %>%
# filter(status %in% c('Susceptible', 'Asymptomatic', 'Infectious', 'Pre-symptomatic', 'Cumulative')) %>%
pivot_wider(names_from = 'status',
values_from = 'value') %>%
mutate(I_A = Asymptomatic + Infectious) %>%
mutate(daily_new = Exposed * mu[1,1] * omega[1,1] + `Pre-symptomatic` * omegapp[1,1]) %>%
left_join(pop, by = c('group' = 'group')) %>%
arrange(group, time) %>%
group_by(group) %>%
mutate(
mean_7day_new = slide_dbl(
.x = daily_new,
.i = time,
.f = mean,
.before = 6
)) %>%
mutate(rolling_week_incid = mean_7day_new / n_fujian * 10000) %>%
separate(group, into = c('age_group', 'vac_group'), sep = '_') %>%
mutate(across(.cols = contains('group'),
.fns  = as.factor)) %>%
mutate(vac_group = fct_relevel(vac_group, 'vac4', 'vac3', 'vac2', 'vac1')) %>%
mutate(scenario = 'w')
# manage school
cut_s <- cut_s %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(status = as.numeric(group)) %>%
mutate(status = case_when(status %in% seq(    1,   m) ~ 'Susceptible',
status %in% seq(  m+1, 2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered',
status %in% seq(6*m+1, 7*m) ~ 'Cumulative')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered', 'Cumulative'))
for (i in 1:28) {
cut_s[cut_s$group %in% c(seq(i, 6*m+i, m)), 'group'] <- c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))
}
sele_s <- cut_s %>%
# filter(status %in% c('Susceptible', 'Asymptomatic', 'Infectious', 'Pre-symptomatic', 'Cumulative')) %>%
pivot_wider(names_from = 'status',
values_from = 'value') %>%
mutate(I_A = Asymptomatic + Infectious) %>%
mutate(daily_new = Exposed * mu[1,1] * omega[1,1] + `Pre-symptomatic` * omegapp[1,1]) %>%
left_join(pop, by = c('group' = 'group')) %>%
arrange(group, time) %>%
group_by(group) %>%
mutate(
mean_7day_new = slide_dbl(
.x = daily_new,
.i = time,
.f = mean,
.before = 6
)) %>%
mutate(rolling_week_incid = mean_7day_new / n_fujian * 10000) %>%
separate(group, into = c('age_group', 'vac_group'), sep = '_') %>%
mutate(across(.cols = contains('group'),
.fns  = as.factor)) %>%
mutate(vac_group = fct_relevel(vac_group, 'vac4', 'vac3', 'vac2', 'vac1')) %>%
mutate(scenario = 'c_s')
# manage factory
cut_f <- cut_f %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(status = as.numeric(group)) %>%
mutate(status = case_when(status %in% seq(    1,   m) ~ 'Susceptible',
status %in% seq(  m+1, 2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered',
status %in% seq(6*m+1, 7*m) ~ 'Cumulative')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered', 'Cumulative'))
for (i in 1:28) {
cut_f[cut_f$group %in% c(seq(i, 6*m+i, m)), 'group'] <- c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))
}
sele_f <- cut_f %>%
# filter(status %in% c('Susceptible', 'Asymptomatic', 'Infectious', 'Pre-symptomatic', 'Cumulative')) %>%
pivot_wider(names_from = 'status',
values_from = 'value') %>%
mutate(I_A = Asymptomatic + Infectious) %>%
mutate(daily_new = Exposed * mu[1,1] * omega[1,1] + `Pre-symptomatic` * omegapp[1,1]) %>%
left_join(pop, by = c('group' = 'group')) %>%
arrange(group, time) %>%
group_by(group) %>%
mutate(
mean_7day_new = slide_dbl(
.x = daily_new,
.i = time,
.f = mean,
.before = 6
)) %>%
mutate(rolling_week_incid = mean_7day_new / n_fujian * 10000) %>%
separate(group, into = c('age_group', 'vac_group'), sep = '_') %>%
mutate(across(.cols = contains('group'),
.fns  = as.factor)) %>%
mutate(vac_group = fct_relevel(vac_group, 'vac4', 'vac3', 'vac2', 'vac1')) %>%
mutate(scenario = 'c_f')
# manage community and others
cno <- cno %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(status = as.numeric(group)) %>%
mutate(status = case_when(status %in% seq(    1,   m) ~ 'Susceptible',
status %in% seq(  m+1, 2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered',
status %in% seq(6*m+1, 7*m) ~ 'Cumulative')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered', 'Cumulative'))
for (i in 1:28) {
cno[cno$group %in% c(seq(i, 6*m+i, m)), 'group'] <- c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))
}
sele_cno <- cno %>%
pivot_wider(names_from = 'status',
values_from = 'value') %>%
mutate(I_A = Asymptomatic + Infectious) %>%
mutate(daily_new = Exposed * mu[1,1] * omega[1,1] + `Pre-symptomatic` * omegapp[1,1]) %>%
left_join(pop, by = c('group' = 'group')) %>%
arrange(group, time) %>%
group_by(group) %>%
mutate(
mean_7day_new = slide_dbl(
.x = daily_new,
.i = time,
.f = mean,
.before = 6
)) %>%
mutate(rolling_week_incid = mean_7day_new / n_fujian * 10000) %>%
separate(group, into = c('age_group', 'vac_group'), sep = '_') %>%
mutate(across(.cols = contains('group'),
.fns  = as.factor)) %>%
mutate(vac_group = fct_relevel(vac_group, 'vac4', 'vac3', 'vac2', 'vac1')) %>%
mutate(scenario = 'cno')
wsf <- bind_rows(sele_w, sele_s, sele_f, sele_cno)
wsf <- wsf %>%
mutate(scenario = as.factor(scenario)) %>%
mutate(scenario = fct_relevel(scenario, 'w', 'c_s', 'c_f', 'cno'))
# peak incidence among age groups and scenarios ---------------------------
peak_incid <- wsf %>% group_by(time, age_group, scenario) %>%
summarise(
sum_vac_incid = sum(rolling_week_incid, na.rm = T),
.groups = 'drop') %>%
group_by(age_group, scenario) %>%
summarise(peak_incid = max(sum_vac_incid, na.rm = T),
.groups = 'drop')
w_peak_incid <- peak_incid %>%
filter(scenario == 'w')
w_peak_incid <- w_peak_incid$peak_incid
reduce_incid <- peak_incid %>%
mutate(w_peak_incid = rep(w_peak_incid, each = 4),
prop_to_w = peak_incid / w_peak_incid,
reduce_incid = 1 - prop_to_w)
o_peak_reduction <- reduce_incid %>% filter(scenario != 'w') %>%
ggplot(mapping = aes(x = scenario, y = reduce_incid)) +
geom_col(fill = 'cornsilk3') +
geom_text(aes(label = scales::percent(1 - prop_to_w, accuracy = 0.01)),
vjust = -0.2,
colour = "black")+
scale_y_continuous(
expand = expansion(0),
limits = c(0, 1.1),
breaks = seq(0, 1, 0.25),
labels = scales::percent
)+
scale_x_discrete(labels = c('School \nclosure', 'Factory \nclosure',
'School + factory\nclosure'))+
theme_classic()+
theme(axis.text = element_text(colour = 'black', size = 10),
axis.text.x =element_text(angle = 60, vjust = 0.5),
strip.background = element_blank())+
labs(x = 'Scenarios',
y = "Reduction of\npeak daily incidence") +
facet_wrap(~ age_group, nrow = 1,
labeller = labeller(age_group = reduction_facet_label))
patch_reduction <- d_peak_reduction /
o_peak_reduction
patch_reduction + plot_annotation(tag_levels = 'a')
ggsave('plot_peak_reduction.pdf', height = 6, width = 13, dpi = 300)
pacman::p_load(
tidyverse,
openxlsx
)
df_sensitivity_ve <- read.xlsx('timeVaryingVE.xlsx', sheet = 5)
df_sensitivity_ve <- df_sensitivity_ve %>%
mutate(time = as.factor(time))
plot_sensitivity_ve <- ggplot(df_sensitivity_ve, aes(time, ve, color = group, group = group)) +
geom_line(size = 1, position=position_dodge(width=0.1)) +
geom_point(size = 2, position=position_dodge(width=0.1)) +
geom_errorbar(aes(ymin = lower, ymax = upper),
width=0.1, size=0.5,
position=position_dodge(width=0.1))+
scale_color_manual(values = c("#0f7ba2", "#dd5129"),
labels = c('To symptom onset of index case',
'To isolation of index case'))+
scale_y_continuous(
expand = c(0, 0),
limits = c(0, 1)
)+
theme_classic()+
theme(
axis.title = element_text(size = 10),
axis.text = element_text(size = 10, colour = 'black'),
plot.margin=unit(c(0.5,0.5,0.5,0.5),units=,"cm"),
legend.position = c(0.8, 0.9)
)+
labs(color = NULL,
x = 'Time since full vaccination (days)',
y = 'Adjusted estimated vaccine effectiveness')
pacman::p_load(
openxlsx,
MASS,
fitdistrplus,
tidyverse,
patchwork
)
df <- read.xlsx('cleaned_data.xlsx')
si_dist <- df %>%
dplyr::select(date_onset, index_onset_date) %>%
mutate(across(.cols = everything(),
.fns = convertToDate)) %>%
drop_na(date_onset) %>%
mutate(si = as.numeric(date_onset - index_onset_date)) %>%
mutate(si_positive = si + 7)
si_shift <- si_dist$si_positive
si_raw <- si_dist$si
si_truncated <- si_dist %>% filter(si > 0)
si_truncated <- si_truncated$si
set.seed(10)
# normMLE  <- fitdist(si_shift, "norm", method = 'mle')
gammaMLE <- fitdist(si_shift, "gamma", method = 'mle')
weiMLE <- fitdist(si_shift, "weibull", method = 'mle')
lnormMLE <- fitdist(si_shift, "lnorm", method = 'mle')
# plot(normMLE)
plot(gammaMLE)
plot(weiMLE)
plot(lnormMLE)
# summary(normMLE)
summary(gammaMLE)
summary(weiMLE)
summary(lnormMLE)
si_data <- as.data.frame(si_shift) %>%
group_by(si_shift) %>%
count() %>%
ungroup() %>%
mutate(freq = n/sum(n))
plot_si_shift <- ggplot(data = data.frame(x = c(0, 30)), aes(x))+
stat_function(fun = dgamma,
args = list(shape = gammaMLE$estimate[[1]], rate = gammaMLE$estimate[[2]]),
mapping = aes(color = 'Gamma'),
size = 1)+
stat_function(fun = dweibull,
args = list(shape = weiMLE$estimate[[1]], scale = weiMLE$estimate[[2]]),
mapping = aes(color = 'Weibull'),
size = 1)+
stat_function(fun = dlnorm,
args = list(mean = lnormMLE$estimate[[1]], sd = lnormMLE$estimate[[2]]),
mapping = aes(color = 'Lognormal'),
size = 1)+
geom_bar(data = si_data,
mapping = aes(x = si_shift,
y = freq,
fill = 'Measured serial interval'),
alpha = 0.3,
stat="identity",
position=position_dodge())+
geom_vline(xintercept=8.64, linetype="dashed", color = "black")+
geom_vline(xintercept=5,    linetype="dotted", color = "black")+
geom_text(x=8.64, y=0.15, label="mean = 3.64", hjust = -0.1)+
scale_y_continuous(
expand = expansion(0),
limits = c(0, 0.16),
breaks = seq(0, 0.15, 0.05)
)+
scale_x_continuous(
breaks = seq(0, 20, 5),
labels = seq(-5, 15, 5)
)+
scale_color_manual(values = c("#0f7ba2","#fab255","#dd5129"),
labels = c('Gamma', 'Lognormal', 'Weibull'))+
scale_fill_manual(values = 'azure4')+
theme_classic()+
theme(axis.title = element_text(size = 10),
axis.text = element_text(size = 10, colour = 'black'),
legend.spacing.x=unit(0.1,'cm'),
legend.key.width=unit(1.5,'cm'),
legend.key.height=unit(0.7,'cm'),
legend.background=element_blank(),
legend.box.margin = margin(1,1,1,1),
legend.position = c(0.8, 0.8),
legend.text = element_text(size = 10))+
labs(colour = NULL,
fill = NULL,
x = 'Serial interval (days)',
y = 'Probability')
ct_data <- df %>%
filter(outcome == 1) %>%
dplyr::select(days_onset_pcr:vac_history) %>%
mutate(days_onset_pcr = as.factor(days_onset_pcr),
vac_history = replace(vac_history, vac_history == 1, 0),
vac_history = as.factor(vac_history)) %>%
drop_na()
# ct_density <- ct_data %>% filter(days_onset_pcr %in% -1:4)
kd_facet_label <- c('At most partially vaccinated',
'Fully vaccinated')
kd_facet_hide <- levels(ct_data$vac_history)
names(kd_facet_label) <- kd_facet_hide
orf1ab_density <- ct_data %>%
ggplot(aes(x = as.numeric(as.character(days_onset_pcr)), y = orf1ab))+
stat_density_2d(aes(fill = ..level..), geom = "polygon") +
scale_fill_distiller(palette = 4, direction = 1,
limits=c(0, 0.04),
breaks=seq(0, 0.04, by = 0.01)) +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 45),
breaks = seq(0, 40, 10)) +
scale_x_continuous(
limits = c(-1, 3)
)+
theme_classic()+
theme(
text = element_text(colour = 'black'),
panel.grid = element_blank(),
strip.background = element_rect(color = 'white')
)+
labs(
x = 'Time since symptom onset (days)',
y = "Ct value",
fill = 'Density')+
facet_wrap(~ vac_history,
labeller = labeller(vac_history = kd_facet_label))
n_density <- ct_data %>%
ggplot(aes(x = as.numeric(as.character(days_onset_pcr)), y = n_gene))+
stat_density_2d(aes(fill = ..level..), geom = "polygon") +
scale_fill_distiller(palette = 4, direction = 1,
limits=c(0, 0.04),
breaks=seq(0, 0.04, by = 0.01)) +
scale_y_continuous(expand = c(0, 0),
limits = c(0, 45),
breaks = seq(0, 40, 10)) +
scale_x_continuous(
limits = c(-1, 3)
)+
theme_classic()+
theme(
text = element_text(colour = 'black'),
panel.grid = element_blank(),
strip.background = element_rect(color = 'white')
)+
labs(
x = 'Time since symptom onset (days)',
y = "Ct value",
fill = 'Density')+
facet_wrap(~ vac_history,
labeller = labeller(vac_history = kd_facet_label))
patch_ve_si_density <- (plot_sensitivity_ve | plot_si_shift) /
orf1ab_density /
n_density
patch_ve_si_density + plot_annotation(tag_levels = 'a')
ggsave('patch_ve_si_density.pdf', height = 15, width = 12, dpi = 300)
