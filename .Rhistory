df %>%
mutate(group = replace(group, group %in% seq(i, 5*28+i, 28), c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))))
# mutate(group = case_when(group %in% seq(i, 5*28+i, 28) ~ c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))))
}
head(df)
tail(df)
df %>%
# mutate(group = replace(group, group %in% seq(i, 5*28+i, 28), c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))))
mutate(group = case_when(group %in% seq(i, 5*28+i, 28) ~ c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))))
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(group = as.numeric(group),
status = group) %>%
mutate(status = case_when(status %in% seq(1,       m) ~ 'Susceptible',
status %in% seq(m+1,   2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered')) %>%
mutate(id = group)
df %>%
mutate(id = replace(id, group %in% seq(i, 5*28+i, 28), c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))))
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(group = as.numeric(group),
status = group) %>%
mutate(status = case_when(status %in% seq(1,       m) ~ 'Susceptible',
status %in% seq(m+1,   2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered')) %>%
mutate(id = group) %>%
mutate(id = replace(id, group %in% seq(1, 5*28+1, 28), c(str_glue('age{age_id[1]}_vac{vac_id[1]}'))))
head(df)
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(group = as.numeric(group),
status = group) %>%
mutate(status = case_when(status %in% seq(1,       m) ~ 'Susceptible',
status %in% seq(m+1,   2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered')) %>%
mutate(id = group) %>%
mutate(id = replace(id, group %in% seq(1, 5*28+1, 28), c(str_glue('age{age_id[1]}_vac{vac_id[1]}')))) %>%
mutate(id = replace(id, group %in% seq(2, 5*28+2, 28), c(str_glue('age{age_id[2]}_vac{vac_id[2]}'))))
head(df)
?mutate_all
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(group = as.numeric(group),
status = group) %>%
mutate(status = case_when(status %in% seq(1,       m) ~ 'Susceptible',
status %in% seq(m+1,   2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered')) %>%
mutate(id = group)
df$id[seq(1, 5*28+1, 28)]
df$id[seq(1, 5*28+1, 28)] <- c(str_glue('age{age_id[1]}_vac{vac_id[1]}'))))
df[id]
df['id'][seq(1, 5*28+1, 28)]
head(df)
df['id']
df['id' %in% seq(1, 5*28+1, 28)]
df[df$id %in% seq(1, 5*28+1, 28)]
df[df$id %in% c(seq(1, 5*28+1, 28))]
c(seq(1, 5*28+1, 28))
df[df$id %in% c(1, 29)]
df[df$id %in% c(seq(1, 5*28+1, 28)), ]
df[df$id %in% c(seq(1, 5*28+1, 28)), id]
df[df$id %in% c(seq(1, 5*28+1, 28)), 'id']
df[df$id %in% c(seq(1, 5*28+1, 28)), 'id'] <- c(str_glue('age{age_id[1]}_vac{vac_id[1]}'))
c(str_glue('age{age_id[1]}_vac{vac_id[1]}'))
df[df$id %in% c(seq(1, 5*28+1, 28)), 'id'] <- NA
df[df$id %in% c(seq(1, 5*28+1, 28)), 'id'] <- c(str_glue('age{age_id[1]}_vac{vac_id[1]}'))
df[df$id %in% c(seq(1, 5*28+1, 28)), 'id']
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(group = as.numeric(group),
status = group) %>%
mutate(status = case_when(status %in% seq(1,       m) ~ 'Susceptible',
status %in% seq(m+1,   2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered')) %>%
mutate(id = group)
df[df$id %in% c(seq(1, 5*28+1, 28)), ] <- NA
head(DF)
head(df)
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(group = as.numeric(group),
status = group) %>%
mutate(status = case_when(status %in% seq(1,       m) ~ 'Susceptible',
status %in% seq(m+1,   2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered')) %>%
mutate(id = group)
df[df$id %in% c(seq(1, 5*28+1, 28)), 'id'] <- NA
head(df)
df[df$id %in% c(seq(1, 5*28+1, 28)), 'id'] <- c('age1')
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(group = as.numeric(group),
status = group) %>%
mutate(status = case_when(status %in% seq(1,       m) ~ 'Susceptible',
status %in% seq(m+1,   2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered')) %>%
mutate(id = as.character(group))
df[df$id %in% c(seq(1, 5*28+1, 28)), 'id'] <- c('age1')
head(df)
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(group = as.numeric(group),
status = group) %>%
mutate(status = case_when(status %in% seq(1,       m) ~ 'Susceptible',
status %in% seq(m+1,   2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered')) %>%
mutate(id = as.character(group))
for (i in 1:28) {
df[df$id %in% c(seq(i, 5*28+i, 28)), 'id'] <- c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))
# mutate(id = replace(id, group %in% seq(i, 5*28+i, 28), c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))))
# mutate(group = case_when(group %in% seq(i, 5*28+i, 28) ~ c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))))
}
head(df)
tail(df)
m
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(status = as.numeric(group)) %>%
mutate(status = case_when(status %in% seq(1,       m) ~ 'Susceptible',
status %in% seq(m+1,   2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered'))
head(df)
class(df)
class(out)
df <- for (i in 1:28) {
df[df$group %in% c(seq(i, 5*m+i, m)), 'group'] <- c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))
}
head(df)
df <- out %>%
pivot_longer(
cols = -1,
names_to = 'group',
values_to = 'value'
) %>%
mutate(status = as.numeric(group)) %>%
mutate(status = case_when(status %in% seq(1,       m) ~ 'Susceptible',
status %in% seq(m+1,   2*m) ~ 'Exposed',
status %in% seq(2*m+1, 3*m) ~ 'Pre-symptomatic',
status %in% seq(3*m+1, 4*m) ~ 'Asymptomatic',
status %in% seq(4*m+1, 5*m) ~ 'Infectious',
status %in% seq(5*m+1, 6*m) ~ 'Recovered')) %>%
mutate(status = fct_relevel(status, "Susceptible", 'Exposed', 'Pre-symptomatic',
'Asymptomatic', 'Infectious', 'Recovered'))
for (i in 1:28) {
df[df$group %in% c(seq(i, 5*m+i, m)), 'group'] <- c(str_glue('age{age_id[i]}_vac{vac_id[i]}'))
}
head(df)
sele_w <- df %>%
filter(status %in% c('Asymptomatic', 'Infectious')) %>%
pivot_wider(names_from = 'status',
values_from = 'value') %>%
mutate(I_A = Asymptomatic + Infectious) %>%
separate(group, into = c('age_group', 'vac_group'), sep = '_') %>%
mutate(across(.cols = contains('group'),
.fns  = as.factor)) %>%
mutate(vac_group = fct_relevel(vac_group, 'vac4', 'vac3', 'vac2', 'vac1')) %>%
mutate(scenario = 'w')
head(sele_w)
#Loading all necessary libraries
pacman::p_load(
deSolve,
tidyverse,
openxlsx,
MetBrewer,
ggsci,
scales,
patchwork
)
V0 <- read.xlsx('pop_of_S_28.xlsx', sheet = 1)
V0 <- V0$n_fujian # inital value for number of susceptible stratified by vaccination status
V0 <- matrix(V0, nrow = 7, byrow = T)
E0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of exposed
P0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
A0 <- matrix(rep(0, 28), nrow = 7, byrow = T)
I0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of infectious
I0[4, 1] <- 1
R0 <- matrix(rep(0, 28), nrow = 7, byrow = T) # inital value for number of recovered
# parameters
beta <- read.xlsx('Beta_28.xlsx', sheet = 2, colNames = F)
beta <- as.matrix(beta) # matrix of transmission rates
kappa1 <- matrix(rep(0.63, 28), nrow = 7, byrow = T)
kappa2 <- matrix(rep(0.35, 28), nrow = 7, byrow = T)
HR <- matrix(rep(c(1, 0.6992, 0.5531, 0.3665), 7), nrow = 7, byrow = T)
mu <- matrix(rep(0.33, 28), nrow = 7, byrow = T)
omega <- matrix(rep(1/3, 28), nrow = 7, byrow = T)
omegap <- matrix(rep(1/3, 28), nrow = 7, byrow = T) # rate at which individuals move from the exposed to the pre-symptom classes
omegapp <- matrix(rep(1/2, 28), nrow = 7, byrow = T)
gamma <- matrix(rep(1/5, 28), nrow = 7, byrow = T) # recovery rate
gammap <- matrix(rep(1/7, 28), nrow = 7, byrow = T)
f_raw <- read.xlsx('death_rate.xlsx', sheet = 1, colNames = F)
f <- as.matrix(f_raw)
# combining parameter and initial values
parms <- list(kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
INPUT <- c(V0, E0, P0, A0, I0, R0)
# INPUT <- list(V = V0, E = E0, P = P0, A = A0, I = I0, R = R0)
ND <- 365 # time to simulate
TS <- 1 # time step to simualte is days
# constructing time vector
t_start <- 0 # starting time
t_end <- ND - 1 # ending time
t_inc <- TS #time increment
t_range <- seq(from= t_start, to=t_end+t_inc, by=t_inc) # vector with time steps
V0
matrix(INPUT[[1]][1:28], nrow = 7)
matrix(INPUT[1:28], nrow = 7)
matrix(INPUT[[1]][29:56], nrow = 7)
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
V
INPUT
V
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
V
kappa1
diff_eqs <- function(times, INPUT, parms){
# a <- list(V = V0, E = E0, P = P0, A = A0, I = I0, R = R0, kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
#           omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
# with(as.list(INPUT, parms), {
V <- matrix(INPUT[1:28], nrow = 7)
E <- matrix(INPUT[29:56], nrow = 7)
P <- matrix(INPUT[57:84], nrow = 7)
A <- matrix(INPUT[85:112], nrow = 7)
I <- matrix(INPUT[113:140], nrow = 7)
R <- matrix(INPUT[141:168], nrow = 7)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) * HR * V
dE <- matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
return(list(c(dV, dE, dP, dA, dI, dR)))
# list(dY)
# })
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
View(out)
V0
diff_eqs <- function(times, INPUT, parms){
# a <- list(V = V0, E = E0, P = P0, A = A0, I = I0, R = R0, kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
#           omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
# with(as.list(INPUT, parms), {
V <- matrix(INPUT[1:28], nrow = 7)
E <- matrix(INPUT[29:56], nrow = 7)
P <- matrix(INPUT[57:84], nrow = 7)
A <- matrix(INPUT[85:112], nrow = 7)
I <- matrix(INPUT[113:140], nrow = 7)
R <- matrix(INPUT[141:168], nrow = 7)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) * HR * V
dE <- matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
return(list(c(t(dV, dE, dP, dA, dI, dR))))
# list(dY)
# })
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
# return(list(c(dV, dE, dP, dA, dI, dR)))
return(list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR))))
diff_eqs <- function(times, INPUT, parms){
# a <- list(V = V0, E = E0, P = P0, A = A0, I = I0, R = R0, kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
#           omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
# with(as.list(INPUT, parms), {
V <- matrix(INPUT[1:28], nrow = 7)
E <- matrix(INPUT[29:56], nrow = 7)
P <- matrix(INPUT[57:84], nrow = 7)
A <- matrix(INPUT[85:112], nrow = 7)
I <- matrix(INPUT[113:140], nrow = 7)
R <- matrix(INPUT[141:168], nrow = 7)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) * HR * V
dE <- matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
# return(list(c(dV, dE, dP, dA, dI, dR)))
return(list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR))))
# list(dY)
# })
}
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
dV
c(t(dV))
c(dV)
diff_eqs <- function(times, INPUT, parms){
# a <- list(V = V0, E = E0, P = P0, A = A0, I = I0, R = R0, kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
#           omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
# with(as.list(INPUT, parms), {
V <- matrix(INPUT[1:28], nrow = 7)
E <- matrix(INPUT[29:56], nrow = 7)
P <- matrix(INPUT[57:84], nrow = 7)
A <- matrix(INPUT[85:112], nrow = 7)
I <- matrix(INPUT[113:140], nrow = 7)
R <- matrix(INPUT[141:168], nrow = 7)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) * HR * V
dE <- matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
# return(list(c(dV, dE, dP, dA, dI, dR)))
return(list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR))))
# list(dY)
# })
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
t(dV)
c(t(dV))
V
dV
INPUT <- c(t(V0), t(E0), t(P0), t(A), t(I0), t(R0))
INPUT <- c(t(V0), t(E0), t(P0), t(A0), t(I0), t(R0))
V
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
V
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
V
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
V
dV
diff_eqs <- function(times, INPUT, parms){
# a <- list(V = V0, E = E0, P = P0, A = A0, I = I0, R = R0, kappa1 = kappa1, kappa2 = kappa2, HR = HR, beta=beta, mu=mu, omega=omega, omegap = omegap,
#           omegapp = omegapp, gamma=gamma, gammap = gammap, f = f)
# with(as.list(INPUT, parms), {
V <- matrix(INPUT[1:28], nrow = 7, byrow = T)
E <- matrix(INPUT[29:56], nrow = 7, byrow = T)
P <- matrix(INPUT[57:84], nrow = 7, byrow = T)
A <- matrix(INPUT[85:112], nrow = 7, byrow = T)
I <- matrix(INPUT[113:140], nrow = 7, byrow = T)
R <- matrix(INPUT[141:168], nrow = 7, byrow = T)
lambda <- t(beta) %*% rowSums(I + kappa1*P + kappa2*A)
dV <- -matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) * HR * V
dE <- matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) - mu*omega*E - (1-mu)*omegap*E
dP <- (1-mu)*omegap*E - omegapp*P
dA <- mu*omega*E - gammap*A
dI <- omegapp*P - gamma*I - f*I
dR <- gamma*I + gammap*A
# return(list(c(dV, dE, dP, dA, dI, dR)))
return(list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR))))
# list(dY)
# })
}
out <- ode(INPUT, t_range, diff_eqs, parms, method = 'rk4')
out <- as.data.frame(out)
View(out)
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
dV
dE
c(t(dV)) == matrix(dV[1:28], nrow = 7, byrow = T)
sum(c(t(dV)) == matrix(dV[1:28], nrow = 7, byrow = T))
(c(t(dV)) == matrix(dV[1:28], nrow = 7, byrow = T))
matrix(dV[1:28], nrow = 7, byrow = T)
(c(t(dV))
)
c(t(dV))
matrix(dV[1:28], nrow = 7, byrow = T)
c(t(dV)) == matrix(dV[1:28], nrow = 7)
c((dV)) == matrix(dV[1:28], nrow = 7)
c((dV)) == matrix(dV[1:28], nrow = 7, byrow = T)
c((dV)) == matrix(dV[1:28], nrow = 7)
c(dV)
dV
V
E
dE
INPUT
V
c(t(dV))
matrix(1:4, nrow = 2, byrow = T)
matrix(1:4,2，2)
matrix(1:4,2,2)
matrix(5:8,2,2)
a <- matrix(1:4,2,2)
b <- matrix(5:8,2,2)
c(a,b)
dV
source("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
rm(list)
rm(list = ls())
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR)))
dV
list(c(t(dV), t(dE), t(dP), t(dA), t(dI), t(dR)))
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
t_range
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
INPUT
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
INPUT
INPUT
lambda
beta
V
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/plot_wsf_delta.R", encoding = 'UTF-8', echo=TRUE)
i
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/plot_wsf_delta.R", encoding = 'UTF-8', echo=TRUE)
i
beta[, i] %*% (Y[4*m + seq(1:m)] + kappa1*Y[2*m + seq(1:m)] + kappa2*Y[3*m + seq(1:m)])
matrix(1:2, 2,1)
temp1 = matrix(1:2, 2,1)
temp2 = matrix(1:6, 2,3)
temp2 * temp1
temp2
temp1
prod(temp2, temp1)
temp2 %*% temp1
temp2 * 3
temp2 * c(2,3)
temp2 * c(2,3,4)
temp2
lambda
debugSource("C:/Users/gyc/Desktop/fjyq_stat_model/fujian_stat_model/ttttest.R", encoding = 'UTF-8', echo=TRUE)
lambda
lambda * HR * V
c(lambda)
c(lambda) * HR * V
matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE)
matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE)
matrix(rep(as.numeric(t(lambda)), each = 4), nrow = nrow(lambda), byrow = TRUE) * HR * V
c(lambda) * HR * V
t(beta)
